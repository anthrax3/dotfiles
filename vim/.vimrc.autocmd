""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""" AUTOCMD """""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

if has("autocmd")

    augroup general_buffer
        au!
        au BufReadPost setlocal nobomb
        au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
        au BufEnter * if bufname("") !~ "^\[A-Za-z0-9\]*://" | lcd %:p:h | endif
    augroup END

    augroup func_whitespace
        au!
        au FileType c,markdown,cpp,java,go,php,javascript,python,twig,text,xml,yml autocmd BufWritePre <buffer> call StripTrailingWhitespace()
    augroup END

    augroup type_text
        au!
        au FileType text setlocal expandtab
        au filetype text setlocal tabstop=4
        au FileType text setlocal softtabstop=4
        au filetype text setlocal shiftwidth=4
    augroup END

    augroup type_gitcommit
        au!
        au FileType gitcommit call setpos('.', [0, 1, 1, 0])
        au FileType gitcommit au! BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])
    augroup END

    augroup type_lisp
        au filetype lisp,scheme setlocal equalprg=scmindent
        au filetype lisp,scheme setlocal tabstop=2
        au filetype lisp,scheme setlocal shiftwidth=2
        au filetype lisp,scheme setlocal expandtab
    augroup END

    augroup type_javascript
        au filetype javascript setlocal tabstop=4
        au filetype javascript setlocal shiftwidth=4
        au FileType javascript setlocal softtabstop=4
        au filetype javascript setlocal noexpandtab
    augroup END

    augroup type_haskell
        au FileType haskell compiler ghc
        au filetype haskell setlocal tabstop=2
        au filetype haskell setlocal shiftwidth=2
        au filetype haskell setlocal expandtab
        au filetype haskell let g:haskell_enable_quantification = 1   " to enable highlighting of `forall`
        au filetype haskell let g:haskell_enable_recursivedo = 1      " to enable highlighting of `mdo` and `rec`
        au filetype haskell let g:haskell_enable_arrowsyntax = 1      " to enable highlighting of `proc`
        au filetype haskell let g:haskell_enable_pattern_synonyms = 1 " to enable highlighting of `pattern`
        au filetype haskell let g:haskell_enable_typeroles = 1        " to enable highlighting of type roles
        au filetype haskell let g:haskell_enable_static_pointers = 1  " to enable highlighting of `static`
        au filetype haskell let g:haskell_backpack = 1                " to enable highlighting of backpack keywords
    augroup END

    augroup type_python
        au!
        au FileType python setlocal expandtab
        au FileType python setlocal tabstop=4
        au FileType python setlocal softtabstop=4
        au FileType python setlocal shiftwidth=4
    augroup END

    augroup type_json
        au!
        au FileType json setlocal equalprg=python\ -m\ json.tool
    augroup END

    augroup bundle_rmarkdown
        au FileType Rmd setlocal expandtab
        au FileType Rmd setlocal tabstop=4
        au FileType Rmd setlocal softtabstop=4
        au FileType Rmd setlocal shiftwidth=4
    augroup END

    augroup pencil
        au!
        au FileType markdown,mkd call pencil#init()
                    \ | call lexical#init()
                    \ | call litecorrect#init()
                    \ | setl spell spl=en_us fdl=4 noru nonu nornu
                    \ | setl fdo+=search
    augroup END
endif

" vim: set sw=4 ts=4 sts=4 et tw=78 nospell:
