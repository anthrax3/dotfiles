################################################################################
################################### HELPERS ####################################
################################################################################

# Helper to test if executable exists
exists() { type -t "$1" > /dev/null 2>&1; }

# Helper to clean vars
function trimspace() {
	echo "${@//[[:blank:]]/}"
}

################################################################################
################################## FUNCTIONS ###################################
################################################################################

# Todo List & Completion
_todo() {
	local iter use cur
	cur=${COMP_WORDS[COMP_CWORD]}
	use=$(cat "$TODOFILE" | awk '{gsub(/ /,"\\ ")}8')
	use="${use//\\ /___}"
	for iter in $use; do
		if [[ $iter =~ ^$cur ]]; then
			COMPREPLY+=( "${iter//___/ }" )
		fi
	done
}
function todo {
	: "${TODO:?'TODO ENV Var not set'}"
	# If we are in a tmux session, name the file with the session name
	# If not in tmux, use the full $TODO env var for path/file
	if echo "$TERM" | grep -Fq screen && test "$TMUX" ; then
		sessname=$(tmux display -p '#S')
		todopath=$(dirname "$TODO")
		TODOFILE=$todopath/$sessname".txt"
	else
		TODOFILE=$TODO
	fi

	case "$1" in
		"-a")
			echo "${*:2}" >> "$TODOFILE"
			;;
		"-d")
			re='^[0-9]+$'
			if ! [[ "$2" =~ $re ]] ; then
				sed -i "" -e "/$2/d" "$TODOFILE" 2> /dev/null
			else
				sed -i "" -e "$2d" "$TODOFILE" 2> /dev/null
			fi
			;;
	esac
	if [ -f "$TODOFILE" ] ; then
		cat "$TODOFILE" | awk '{ print NR, "-", $0 }'
	fi
}
complete -F _todo todo

# find todo notes in current project
function todos {
	#local m=$(trimspace $(git diff --numstat 2> /dev/null | wc -l))
	LOCAL_DIR=$(git rev-parse --show-toplevel 2> /dev/null)
	LOCAL_DIR=${LOCAL_DIR:-.}
	find "${LOCAL_DIR}" -type f -exec grep -H -n '(TODO|FIX(ME)?):' {} \; 2> /dev/null
}

# jump to root folder of git repo
function cdroot {
	LOCAL_DIR=$(git rev-parse --show-toplevel)
	LOCAL_DIR=${LOCAL_DIR:-.}
	cd "$LOCAL_DIR"
}

# json formatting / highlighting
function json() {
	if [ -t 0 ]; then
		python -mjson.tool <<< "$*" | pygmentize -l javascript
	else
		python -mjson.tool | pygmentize -l javascript
	fi
}

# Create a data URL from a file
function dataurl() {
	local mimeType=$(file -b --mime-type "$1")
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8"
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}"
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# Start a PHP server from a directory, optionally specifying the port
# (Requires PHP 5.4.0+.)
function phpserver() {
	if hash ipconfig 2>/dev/null; then
		local port="${1:-4000}"
		local ip=$(ipconfig getifaddr en1)
		if [[ -z ${ip} ]] ; then
			local ip=$(ipconfig getifaddr en0)
		fi
		sleep 1 && open "http://${ip}:${port}/" &
		php -S "${ip}:${port}"
	else
		php -S "127.0.0.1:4000"
	fi
}

# Start a .NET server using mono
function netserver() {
	local port="${1:-8080}"
	local ip=$(ipconfig getifaddr en1)
	if [[ -z ${ip} ]] ; then
		local ip=$(ipconfig getifaddr en0)
	fi
	sleep 1 && open "http://${ip}:${port}/" &
	xsp2 --port "${port}" --address "${ip}" --verbose
}

# R language
function knit() {
	Rscript -e "rmarkdown::render(\"$1\")"
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX
}

# Return current git branch
function parse_git_branch {
	local B=$(git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/')
	echo "${B}"
}

# Return number of staged files in folder
function gitstaged() {
	local s=$(trimspace "$(git diff --cached --numstat 2> /dev/null | wc -l)" )
	if [ "0" == "${s}" ]; then
		s=""
	else
		s=" stg: ${s}"
	fi
	echo "${s}"
}

# Return number of modified files in folder
function gitmodified() {
	local m=$(trimspace "$(git diff --numstat 2> /dev/null | wc -l)" )
	if [ "0" == "${m}" ]; then
		m=""
	else
		m=" mod: ${m}"
	fi
	echo "${m}"
}

# Return number of untracked files in folder
function gituntracked() {
	local u=$(trimspace "$(git ls-files --exclude-standard --others 2> /dev/null | wc -l)" )
	if [ "0" == "${u}" ]; then
		u=""
	else
		u=" untrk: ${u}"
	fi
	echo "${u}"
}

function gittreestatus() {
	if [ $# -eq 0 ]; then
		for i in $(find . -type d -maxdepth 1)
		do
			cd "$i" && echo -e "$(pwd)" "${STAGED_COLOR}$(gitstaged)${MODIFIED_COLOR}$(gitmodified)${UNTRACKED_COLOR}$(gituntracked)${RESET_COLOR}" && cd - > /dev/null
		done
	else
		for i in $(find "$1" -type d -maxdepth 1)
		do
			cd "$i" && echo -e "$(pwd)" "${STAGED_COLOR}$(gitstaged)${MODIFIED_COLOR}$(gitmodified)${UNTRACKED_COLOR}$(gituntracked)${RESET_COLOR}" && cd - > /dev/null
		done
	fi
}

# Swap 2 filenames around, if they exist
function swap() {
    local TMPFILE=tmp.$$

    [ $# -ne 2 ] && echo "swap: 2 arguments needed" && return 1
    [ ! -e "$1" ] && echo "swap: $1 does not exist" && return 1
    [ ! -e "$2" ] && echo "swap: $2 does not exist" && return 1

    mv "$1" $TMPFILE
    mv "$2" "$1"
    mv $TMPFILE "$2"
}

# batch rename
function change_all_extensions() {
	for old in *."$1"; do mv $old `basename $old ."$1"`."$2"; done
}

# Use the right extraction method based on file extension
function extract() {
    if [ -f "$1" ] ; then
        case $1 in
            *.tar.bz2)   tar xvjf "$1"     ;;
            *.tar.gz)    tar xvzf "$1"     ;;
            *.bz2)       bunzip2 "$1"      ;;
            *.rar)       unrar x "$1"      ;;
            *.gz)        gunzip "$1"       ;;
            *.tar)       tar xvf "$1"      ;;
            *.tbz2)      tar xvjf "$1"     ;;
            *.tgz)       tar xvzf "$1"     ;;
            *.zip)       unzip "$1"        ;;
            *.Z)         uncompress "$1"   ;;
            *.7z)        7z x "$1"         ;;
            *)           echo "'$1' cannot be extracted via >extract<" ;;
        esac
    else
        echo "'$1' is not a valid file!"
    fi
}

# Create a horizontal rule, hr style
function hr() {
	set -f
	if [[ -n $1 ]]; then
		space_character=$( echo "$1" | head -c 1)
	else
		space_character='='
	fi
	for i in $(seq 1 "$(tput cols)");
	do
		echo -n "${space_character}";
	done
	echo ""
}

# Move file to a backup ".old" version
old() {
    mv "$1"{,.old}
}

# Note taking function and command completion
_n() {
	local lis=$(ls -1 "$NOTE_DIR" | sed -e 's/\..*$//')
	local cur=${COMP_WORDS[COMP_CWORD]}
	COMPREPLY=( $(compgen -W "$lis" -- $cur) )
}
n() {
	: "${NOTE_DIR:?'NOTE_DIR ENV Var not set'}"
	if [ $# -eq 0 ]; then
		ls -1 "$NOTE_DIR" | grep "$*" | sed -e 's/\..*$//'
	else
		case "$1" in
			"-d")
				rm "$NOTE_DIR"/"$2".md
				;;
			*)
				$EDITOR "$NOTE_DIR"/"$*".md
				;;
		esac
	fi
}
complete -F _n n

_track() {
	local lis=$(ls -1 "$TRACK_DIR" | sed -e 's/\..*$//')
	local cur=${COMP_WORDS[COMP_CWORD]}
	COMPREPLY=( $(compgen -W "$lis" -- $cur) )
}
track() {
	: "${TRACK_DIR:?'TRACK_DIR ENV var not set'}"
	if [ $# -eq 0 ]; then
		ls -1 "$TRACK_DIR" | grep "$*" | sed -e 's/\..*$//'
	else
		case "$1" in
			-h|--help)
				echo "track - track a thing"
				echo " "
				echo "track thing [options] [value]"
				echo " "
				echo "options:"
				echo "-h, --help                show brief help"
				echo "-a, --all                 show all values of thing"
				echo "-n, --number              show # values of thing"
				;;
			*)
				local f
				local fn
				f="$TRACK_DIR"/"$1".csv
				fn="$1"
				shift
				if [ $# -eq 0 ]; then
					if [ ! -f "$f" ]; then
						echo "track: '$fn' not found"
					else
						tail -n 1 "$f" | column -s, -t | awk '{printf "\033[38;05;226m%s-\033[38;05;226m%s-\033[38;05;226m%s\t\033[38;05;46m%s\t\n", $1, $2, $3, $4;}'
					fi
				else
					if [ ! -f "$f" ]; then
						echo "year,month,day,$fn" > "$f"
					fi
					case "$1" in
						-h|--help)
							echo "track - track a thing"
							echo " "
							echo "track thing [options] [value]"
							echo " "
							echo "options:"
							echo "-h, --help                show brief help"
							echo "-a, --all                 show all values of thing"
							echo "-n, --number              show # values of thing"
							;;
						-a|--all)
							column -s, -t "$f" | awk '{printf "\033[38;05;226m%s-\033[38;05;226m%s-\033[38;05;226m%s\t\033[38;05;46m%s\t\n", $1, $2, $3, $4;}'
							;;
						-n|--number)
							tail -n "$2" "$f" | column -s, -t | awk '{printf "\033[38;05;226m%s-\033[38;05;226m%s-\033[38;05;226m%s\t\033[38;05;46m%s\t\n", $1, $2, $3, $4;}'
							;;
						*)
							local d
							d=$(date '+%Y,%m,%d')
							local l
							l=$(sed -n "/$d/{=;}" "$f")
							if [ -z "$l" ]; then
								echo "$d,$*" >> "$f"
							else
								sed -i "$l c $d,$*" "$f"
							fi
							;;
					esac
				fi
				;;
		esac
	fi
}
complete -F _track track

# get battery level on osx
battery() {
	ioreg -l | grep -i capacity | tr '\n' ' | ' | awk '{printf("%.2f%%\n", $10/$5 * 100)}'
}

# c - browse chrome history
c() {
	local cols sep
	cols=$(( COLUMNS / 3 ))
	sep='{::}'
	cp -f ~/Library/Application\ Support/Google/Chrome/Default/History /tmp/h
	sqlite3 -separator $sep /tmp/h \
	"select substr(title, 1, $cols), url
	from urls order by last_visit_time desc" |
	awk -F $sep '{printf "%-'$cols's  \x1b[36m%s\x1b[m\n", $1, $2}' |
	fzf --ansi --multi | sed 's#.*\(https*://\)#\1#' | xargs open
}

# fshow - git commit browser (enter for show, ctrl-d for diff, ` toggles sort)
flog() {
  local out shas sha q k
  while out=$(
      git log --graph --color=always \
          --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
      fzf --ansi --multi --no-sort --reverse --query="$q" \
          --print-query --expect=ctrl-d --toggle-sort=\`); do
    q=$(head -1 <<< "$out")
    k=$(head -2 <<< "$out" | tail -1)
    shas=$(sed '1,2d;s/^[^a-z0-9]*//;/^$/d' <<< "$out" | awk '{print $1}')
    [ -z "$shas" ] && continue
    if [ "$k" = ctrl-d ]; then
      git diff --color=always $shas | less -R
    else
      for sha in $shas; do
        git show --color=always $sha | less -R
      done
    fi
  done
}

# fe [FUZZY PATTERN] - Open the selected file with the default editor
#   - Bypass fuzzy finder if there's only one match (--select-1)
#   - Exit if there's no match (--exit-0)
fe() {
  local file
  file=$(fzf --query="$1" --select-1 --exit-0)
  [ -n "$file" ] && ${EDITOR:-vim} "$file"
}

# fd - cd to selected directory
fd() {
  local dir
  dir=$(find ${1:-*} -path '*/\.*' -prune \
                  -o -type d -print 2> /dev/null | fzf +m) &&
  cd "$dir"
}

# fda - including hidden directories
fda() {
  local dir
  dir=$(find ${1:-.} -type d 2> /dev/null | fzf +m) && cd "$dir"
}

# cdf - cd into the directory of the selected file
cdf() {
   local file
   local dir
   file=$(fzf +m -q "$1") && dir=$(dirname "$file") && cd "$dir"
}

# fkill - kill process
fkill() {
  pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')

  if [ "x$pid" != "x" ]
  then
    kill -${1:-9} $pid
  fi
}

# Override Z for use with fzf
unalias z 2> /dev/null
z() {
  if [[ -z "$*" ]]; then
    cd "$(_z -l 2>&1 | fzf +s --tac | sed 's/^[0-9,.]* *//')"
  else
    _z "$@"
  fi
}

# calculator
=() {
	python -c "from math import *; print($@)"
}

# image metadata from web
imgmeta() {
	curl -sr 0-1024 "$@" |strings
}

# expand url shorteners
expandurl() { curl -sIL "$1" 2>&1 | awk '/^Location/ {print $2}' | tail -n1; }
